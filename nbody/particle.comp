#version 450 core

// const float EPS2 = 1e-3;

//const float GRAVITY_CONSTANT = 6.674e-11;
const float GRAVITY_CONSTANT = 100;

layout(local_size_x = 256) in;

uniform uint num_particles;
uniform float dt;

layout(std430, binding=0) buffer particles_buffer {
    vec4 particles[];
};

void main() {
    uint particle_id = gl_GlobalInvocationID.x;

    if (particle_id >= num_particles) return;

    vec3  pos  = particles[particle_id * 2    ].xyz;
    float mass = particles[particle_id * 2    ].w;
    vec3  vel  = particles[particle_id * 2 + 1].xyz;

    vec3 acc = vec3(0.0);

    uint i;
    for (i = 0; i < num_particles; i++) {
        if (i == particle_id) continue;

        vec3  pos2  = particles[i * 2].xyz;
        float mass2 = particles[i * 2].w;

        vec3 dpos = pos2 - pos;
        float dist_sq = dot(dpos, dpos);// + EPS2;
        acc += (mass2 / sqrt(dist_sq * dist_sq * dist_sq)) * dpos;
    }

    barrier();
    memoryBarrier();

    acc *= GRAVITY_CONSTANT;
    vel += acc * dt;
    pos += vel * dt;

    particles[particle_id * 2    ].xyz = pos;
    particles[particle_id * 2    ].w   = mass;
    particles[particle_id * 2 + 1].xyz = vel;
}
